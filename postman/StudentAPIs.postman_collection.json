{
	"info": {
		"_postman_id": "cc794c4a-9c9a-4863-b6dd-6b7a9ca573f4",
		"name": "StudentAPIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18272812"
	},
	"item": [
		{
			"name": "GET Single Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Successful GET resquest\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
							"    // pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie 'language' is present\", () => {\r",
							"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie language has value 1\", () => {\r",
							"    pm.expect(pm.cookies.get('language').to.eql('en-gb'));\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 50ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
							"});\r",
							"\r",
							"//Test the type of any part of the response\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//Test array contents in body\r",
							"pm.test(\"Test array properties\", () => {\r",
							"    //course includer \"Java\"\r",
							"    pm.expect(jsonData.courses).to.include(\"Java\");\r",
							"    //courses array must include all listed\r",
							"    pm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]);\r",
							"});\r",
							"\r",
							"//Validating JSON fields in Response\r",
							"pm.test(\"value of fields in response\", () => {\r",
							"   // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"    pm.expect(jsonData.name).to.eql(\"John\");\r",
							"    pm.expect(jsonData.location).to.eql(\"India\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"});\r",
							"\r",
							"//JSON Schema Validation\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is a valid', function() {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Students Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Successful GET resquest\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
							"    // pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie 'language' is present\", () => {\r",
							"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie language has value 1\", () => {\r",
							"    pm.expect(pm.cookies.get('language').to.eql('en-gb'));\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 50ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
							"});\r",
							"\r",
							"//Test the type of any part of the response\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//Test array contents in body\r",
							"pm.test(\"Test array properties\", () => {\r",
							"    //course includer \"Java\"\r",
							"    pm.expect(jsonData.courses).to.include(\"Java\");\r",
							"    //courses array must include all listed\r",
							"    pm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]);\r",
							"});\r",
							"\r",
							"//Validating JSON fields in Response\r",
							"pm.test(\"value of fields in response\", () => {\r",
							"   // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"    pm.expect(jsonData.name).to.eql(\"John\");\r",
							"    pm.expect(jsonData.location).to.eql(\"India\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"});\r",
							"\r",
							"//JSON Schema Validation\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"location\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"phone\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"courses\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"location\",\r",
							"        \"phone\",\r",
							"        \"courses\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"location\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"phone\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"courses\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"location\",\r",
							"        \"phone\",\r",
							"        \"courses\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"location\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"phone\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"courses\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"location\",\r",
							"        \"phone\",\r",
							"        \"courses\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is a valid', function() {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Successful GET resquest\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
							"    // pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie 'language' is present\", () => {\r",
							"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie language has value 1\", () => {\r",
							"    pm.expect(pm.cookies.get('language').to.eql('en-gb'));\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 50ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
							"});\r",
							"\r",
							"//Test the type of any part of the response\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//Test array contents in body\r",
							"pm.test(\"Test array properties\", () => {\r",
							"    //course includer \"Java\"\r",
							"    pm.expect(jsonData.courses).to.include(\"Java\");\r",
							"    //courses array must include all listed\r",
							"    pm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]);\r",
							"});\r",
							"\r",
							"//Validating JSON fields in Response\r",
							"pm.test(\"value of fields in response\", () => {\r",
							"   // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"    pm.expect(jsonData.name).to.eql(\"John\");\r",
							"    pm.expect(jsonData.location).to.eql(\"India\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"});\r",
							"\r",
							"//JSON Schema Validation\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is a valid', function() {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rutuja\",\r\n    \"location\": \"California\",\r\n    \"phone\": \"123456\",\r\n    \"courses\":[\r\n        \"Playright\",\r\n        \"Cypress\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rutuja\",\r\n    \"location\": \"California\",\r\n    \"phone\": \"12345678\",\r\n    \"courses\":[\r\n        \"Playright\",\r\n        \"Cypress\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/1f73",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1f73"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "PUT Update Student Re",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Successful GET resquest\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
							"    // pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie 'language' is present\", () => {\r",
							"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie language has value 1\", () => {\r",
							"    pm.expect(pm.cookies.get('language').to.eql('en-gb'));\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 50ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
							"});\r",
							"\r",
							"//Test the type of any part of the response\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//Test array contents in body\r",
							"pm.test(\"Test array properties\", () => {\r",
							"    //course includer \"Java\"\r",
							"    pm.expect(jsonData.courses).to.include(\"Java\");\r",
							"    //courses array must include all listed\r",
							"    pm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]);\r",
							"});\r",
							"\r",
							"//Validating JSON fields in Response\r",
							"pm.test(\"value of fields in response\", () => {\r",
							"   // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"    pm.expect(jsonData.name).to.eql(\"John\");\r",
							"    pm.expect(jsonData.location).to.eql(\"India\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"});\r",
							"\r",
							"//JSON Schema Validation\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is a valid', function() {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rutuja Wayase\",\r\n    \"location\": \"California location\",\r\n    \"phone\": \"12345678\",\r\n    \"courses\":[\r\n        \"Playright\",\r\n        \"Cypress\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/79de",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"79de"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student Re",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Successful GET resquest\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
							"    // pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie 'language' is present\", () => {\r",
							"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie language has value 1\", () => {\r",
							"    pm.expect(pm.cookies.get('language').to.eql('en-gb'));\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 50ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
							"});\r",
							"\r",
							"//Test the type of any part of the response\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//Test array contents in body\r",
							"pm.test(\"Test array properties\", () => {\r",
							"    //course includer \"Java\"\r",
							"    pm.expect(jsonData.courses).to.include(\"Java\");\r",
							"    //courses array must include all listed\r",
							"    pm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]);\r",
							"});\r",
							"\r",
							"//Validating JSON fields in Response\r",
							"pm.test(\"value of fields in response\", () => {\r",
							"   // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"    pm.expect(jsonData.name).to.eql(\"John\");\r",
							"    pm.expect(jsonData.location).to.eql(\"India\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"});\r",
							"\r",
							"//JSON Schema Validation\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is a valid', function() {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/79de",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"79de"
					]
				}
			},
			"response": []
		}
	]
}